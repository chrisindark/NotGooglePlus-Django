import stripe

from django.conf import settings


class StripeUtility(object):
    def __init__(self):
        self.stripe = stripe
        self.stripe.api_key = settings.STRIPE_API_KEY
        self.webhook_secret_key = settings.STRIPE_WEBHOOK_KEY

    def create_customer(self):
        try:
            return self.stripe.Customer.create()
        except self.stripe.error.APIError as e:
            return self.error_handler(e)

    def retrieve_customer(self, customer_id):
        try:
            return self.stripe.Customer.retrieve(customer_id)
        except self.stripe.error.APIError as e:
            return self.error_handler(e)

    def update_customer(self, customer_id, customer_data):
        customer = self.retrieve_customer(customer_id)
        try:
            if customer.http_status != 200:
                raise self.stripe.error.APIError(customer)
            customer.update(customer_data)
            customer = customer.save()
        except self.stripe.error.APIError as e:
            return self.error_handler(e)

        return customer

    def delete_customer(self, customer_id):
        customer = self.retrieve_customer(customer_id)
        try:
            if customer.http_status != 200:
                raise self.stripe.error.APIError(customer)
            res = customer.delete()
        except self.stripe.error.APIError as e:
            return self.error_handler(e)

        return res

    def create_charge(self, amount, currency, source, **kwargs):
        """
        Creates a charge object for making a transaction
        by taking amount, currency and a source and returns
        a transaction object if payment is successful.
        :param amount: Amount in dollars converted to cents
        :param currency: Currency of amount
        :param source: Token generated from sending
        credit card details to Stripe server directly.
        :param kwargs: Other options to be sent with params
        :return:
        """
        amount *= 100
        charge_params = {
            'amount': amount,
            'currency': currency,
            'source': source,
            'description': kwargs.get('description', '')
        }

        try:
            charge_obj = self.stripe.Charge.create(charge_params)
        except self.stripe.error.APIError as e:
            # Since it's a decline, stripe.error.CardError will be caught
            return self.error_handler(e)
        # except self.stripe.error.RateLimitError as e:
        #     # Too many requests made to the API too quickly
        #     pass
        # except self.stripe.error.InvalidRequestError as e:
        #     # Invalid parameters were supplied to Stripe's API
        #     pass
        # except self.stripe.error.AuthenticationError as e:
        #     # Authentication with Stripe's API failed
        #     # (maybe you changed API keys recently)
        #     pass
        # except self.stripe.error.APIConnectionError as e:
        #     # Network communication with Stripe failed
        #     pass
        # except self.stripe.error.APIError as e:
        #     # Display a very generic error to the user, and maybe send
        #     # yourself an email
        #     pass
        # except Exception as e:
        #     # Something else happened, completely unrelated to Stripe
        #     pass

        return charge_obj

    def retrieve_charge(self, charge_id):
        try:
            return self.stripe.Charge.retrieve(charge_id)
        except self.stripe.error.APIError as e:
            return self.error_handler(e)

    def create_card(self, customer_id, token):
        """
        Creates a card object in Stripe's database using
        a Stripe generated card token and associates with
        a Stripe customer.
        :param customer_id: Stripe's customer id
        :param token: Stripe's token object generated by
        sending card details
        :return:
        """
        customer = self.retrieve_customer(customer_id)
        try:
            if customer.http_status != 200:
                raise self.stripe.error.APIError(customer)
            card_obj = customer.sources.create(source=token['id'])
        except self.stripe.error.APIError as e:
            return self.error_handler(e)

        return card_obj

    def retrieve_card(self, customer_id, card_id):
        """
        Retrieves a card object from Stripe's database
        that matches the card_id and customer.
        :param customer_id: Stripe's customer id
        :param card_id: Stripe's card id
        :return:
        """
        customer = self.retrieve_customer(customer_id)
        try:
            if customer.http_status != 200:
                raise self.stripe.error.APIError(customer)
            return customer.sources.retrieve(card_id)
        except self.stripe.error.APIError as e:
            return self.error_handler(e)

    """
    Creates a token by sending payload containing
    user's credit card details and return the token.
    This function shouldn't be used for PCI compliance issues.
    """
    def create_card_token(self, card_obj):
        """
        card = {
            "number": '4242424242424242',
            "exp_month": 12,
            "exp_year": 2018,
            "cvc": '123'
        },
        :param card_obj: {'card': card}
        :return: token
        """
        try:
            return self.stripe.Token.create(card_obj)
        except self.stripe.error.APIError as e:
            return self.error_handler(e)

    """
    Creates a token by sending payload containing
    user's credit card details and return the token.
    This function shouldn't be used for PCI compliance issues.
    """
    def create_bank_account_token(self, bank_account_obj):
        """
        bank_account = {
            "country": 'US',
            "currency": 'usd',
            "account_holder_name": 'Andrew Garcia',
            "account_holder_type": 'individual',
            "routing_number": '110000000',
            "account_number": '000123456789'
        }
        :param bank_account_obj: {'bank_account': bank_account}
        :return: token
        """
        try:
            return self.stripe.Token.create(bank_account_obj)
        except self.stripe.error.APIError as e:
            return self.error_handler(e)

    def stripe_web_hook_handler(self, payload, sig_header):
        """

        :param payload: request.data.decode('utf-8')
        :param sig_header: request.headers.get('Stripe-Signature', None)
        :return:
        """
        try:
            event = self.stripe.Webhook.construct_event(
                payload, sig_header, self.webhook_secret_key)
        except self.stripe.error.APIError as e:
            return self.error_handler(e)

        print("Received event: id={id}, type={type}".format(
            id=event.id, type=event.type))

        return {
            'status': 200,
            'message': 'Success',
            'detail': 'Stripe Success'
        }

    @staticmethod
    def error_handler(e):
        body = e.json_body
        err = body.get('error', {})
        body['status'] = e.http_status
        body['message'] = err.get('message')
        body['detail'] = 'Stripe Error'
        # only present in CardError and InvalidRequestError
        body['code'] = err.get('code', None)
        body['param'] = err.get('param', None)
        # only present in OAuthError
        body['type'] = err.get('type')
        # only present in SignatureVerificationError
        body['sig_header'] = err.get('sig_header')

        return body
